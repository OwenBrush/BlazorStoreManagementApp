@inject IFilterInventoriesUseCase FilterInventoriesUseCase

<table class="table">
	<thead>
		<tr>
			<th>Name</th>
			<th>Quantity</th>
			<th>Price</th>
			<th>Edit</th>
		</tr>
	</thead>
	<tbody>
		<InventoryFilterComponent
			OnFilterChange="OnFilterChange">
		</InventoryFilterComponent>
		@foreach(var inv in inventoriesFiltered)
		{
			<tr>
				<td>@inv.InventoryName</td>
				<td class="text-center">@inv.Quantity</td>
				<td class="text-center">@inv.Price</td>
				<td>
					<button 
						type="button"
						class="btn btn-light">
					</button>
				</td>
			</tr>
		}
	</tbody>
</table>

@code {

	[Parameter]
	public List<Inventory> inventories { get; set; } = new List<Inventory>();

	private List<Inventory> inventoriesFiltered { get; set; } = new List<Inventory>();

	protected override void OnParametersSet()
	{
		inventoriesFiltered = inventories;
	}

	private async Task OnFilterChange(InventoryFilter filter)
	{
		inventoriesFiltered = (await FilterInventoriesUseCase.ExecuteAsync(inventories, filter)).ToList();
	}

	
}
