@inject IInventoriesFilterUseCase FilterInventoriesUseCase

<table class="table">
	<thead>
		<tr>
			<th>Name</th>
			<th class="text-center">Quantity</th>
			<th class="text-center">Price</th>
			<th>Edit</th>
		</tr>
	</thead>
	<tbody>
		<InventoryFilterComponent
			OnFilterChange="OnFilterChange">
		</InventoryFilterComponent>
		@foreach(var index in Enumerable.Range(0,inventories.Count))
		{
			@if(!inventoriesFiltered.Contains(inventories[index]))
			{
				@if(indexToEdit.Contains(index))
				{
					<InventoryEditComponent
						OnItemEdit="OnItemEdit"
						OnItemDelete="OnItemDelete"
						ItemIndex="index"
						InventoryList="inventories"
						Inv = "inventories[index]">
					</InventoryEditComponent>
				}
				@if(!indexToEdit.Contains(index))
				{
					<InventoryItemComponent
						ItemIndex="index"
						Inv = "inventories[index]"
						OnItemEditInitiate="OnItemEditInitiate">
					</InventoryItemComponent>
				}

			}

		}
		<InventoryEditComponent
			OnItemEdit="OnItemEdit"
			ItemIndex="inventories.Count"	
			InventoryList="inventories">
		</InventoryEditComponent>
	</tbody>
</table>

@code {

	[Parameter]
	public List<Inventory> inventories { get; set; } = new List<Inventory>();

	private List<Inventory> inventoriesFiltered { get; set; } = new List<Inventory>();

	private List<int> indexToEdit { get; set; } = new List<int>();


	private async Task OnItemEditInitiate(int index)
	{
		if (indexToEdit.Contains(index)) return;
		indexToEdit.Add(index);
	}


	private async Task OnFilterChange(InventoryFilter filter)
	{
		inventoriesFiltered = (await FilterInventoriesUseCase.ExecuteAsync(inventories, filter)).ToList();
		indexToEdit = new List<int>();

	}

	private async Task OnItemEdit(int index)
	{
		if(indexToEdit.Contains(index))
		{
			var itemToRemove = indexToEdit.Single(r => r == index);
			indexToEdit.Remove(itemToRemove);			
		}

	}

	private async Task OnItemDelete(int index)
	{
		indexToEdit.Remove(index);
	}

	
}
