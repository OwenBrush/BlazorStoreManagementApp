@inject ILocationRepository LocationRepository
@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Warehouse Manager</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-question-mark" aria-hidden="true"></span>
                About
            </NavLink>
        </div>
        @foreach(var index in Enumerable.Range(0,locations.Count))
        {
        <div class="nav-item px-3">
            <NavLink class="nav-link" href=@("location/"+index.ToString())>
                <span class="oi oi-home" aria-hidden="true"></span> 
                @locations[index].LocationName
            </NavLink>
        </div>
        }
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="newLocation">
                <span class="oi oi-plus" aria-hidden="true"></span> 
                Create New Location
            </NavLink>
        </div>
    </nav>
</div>

@code {

    private List<Location> locations = new List<Location>();

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        locations = LocationRepository.GetLocations();
        LocationRepository.OnChanged += OnLocationListChange;
    }

    private void OnLocationListChange(object sender, EventArgs e)
    {
      InvokeAsync(StateHasChanged);
    }


}
